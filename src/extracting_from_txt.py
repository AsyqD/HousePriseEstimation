import pandas as pd
import numpy as np
import csv
import os

"""_______________Extract data from TXT file_______________________________________________"""
# search for specific target


def search_fn(line, target):
    for i in line:
        i = i.lower()
        if target in i:
            for item in i.split(', '):
                if target in item:
                    return item
    return None

def extract(file_from_extract):
    # file_from_extract = 'parsing_results/txt/parsing_result_240717_almaty_18000.txt'
    file_to_save = f'{file_from_extract.split('/')[0]}/csv/{file_from_extract.split('/')[2].split('.')[0]}.csv'
    with open(file_from_extract, "r", encoding="utf-8") as f:
        lines = f.readlines()
        i = 0
        """_______________Columns_________________"""
        number_of_rooms = []
        areas = []
        levels = []
        level = []
        prices = []
        districts = []
        microdistricts = []
        streets = []
        years = []
        isnewbuilding = []
        ceilings = []
        owners = []
        bathrooms = []
        repairs = []
        citys = []
        
        
        ll = set()
        ss = set()
        anomals = []
        for line in lines:
            """
            * Get the lines of txt data which should look like this:
            * 
            * "1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, 40 –º¬≤, 9/9 —ç—Ç–∞–∂|18 990 000 „Äí|–ù–∞—É—Ä—ã–∑–±–∞–π—Å–∫–∏–π —Ä-–Ω, –º–∫—Ä –®—É–≥—ã–ª–∞, –†–∞–π—ã–º–±–µ–∫–∞ ‚Äî –ñ—É–∞–ª—ã|–∂–∏–ª. –∫–æ–º–ø–ª–µ–∫—Å Nurly Dala, –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –¥–æ–º, 2023 –≥.–ø., —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ö–æ—Ä–æ—à–µ–µ, –ø–æ—Ç–æ–ª–∫–∏ 2.62–º., —Å–∞–Ω—É–∑–µ–ª —Å–æ–≤–º–µ—â–µ–Ω–Ω—ã–π, –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ, –ü—Ä–æ–¥–∞–µ—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –∂–∫ –ù—É—Ä–ª—ã –¥–∞–ª–∞ –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –ë–∞–∑–∏—Å-–ê —Ä—è–¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è: - –ê–ø–æ—Ä—Ç –º–æ–ª - –õ–µ—Ä—É–∞ –ú–µ—Ä–ª–µ–Ω –ü–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ! –ö–≤–∞—Ä—Ç–∏—Ä–∞ —á–∏—Å—Ç–∞—è, —Å–≤–µ—Ç–ª–∞‚Ä¶|–ö—Ä—ã—à–∞ –ê–≥–µ–Ω—Ç|–ê–ª–º–∞—Ç—ã|17 –∏—é–ª.|201|–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
            * 
            * Then split this `line` by `|` and get list which will look like this:
            * [
            *     '4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, 160.85 –º¬≤', 
            *     '–æ—Ç 129 645 100 „Äí', 
            *     '–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π —Ä-–Ω, –õ–µ–±–µ–¥–µ–≤–∞ 1/1', 
            *     '–∂–∏–ª. –∫–æ–º–ø–ª–µ–∫—Å Verdi, 9 —ç—Ç–∞–∂–µ–π, 2025 –≥.–ø., –ø–æ—Ç–æ–ª–∫–∏ 3–º., —Å–∞–Ω—É–∑–µ–ª 2 —Å/—É –∏ –±–æ–ª–µ–µ, –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞üí•Workout –∑–æ–Ω–∞üí•–¢–∏—Ö–∏–π –¥–≤‚Ä¶', 
            *     '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–ñ–ö ¬´Verdi¬ª', 
            *     '–æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ ¬´BI Group¬ª', 
            *     '–ê–ª–º–∞—Ç—ã', 
            *     '17 –∏—é–ª.', 
            *     '788', 
            *     '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'
            * ]
            """
            line = line.strip()
            line = line.split('|')
            
            
            """
            ______________Number of rooms_________________
            * The logic is to get first item of `line` which should look like this:
            * '4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, 160.85 –º¬≤'
            * And get the number
            """
            first = line[0].split(', ')
            number_of_rooms.append(int(first[0].split('-')[0]))
            
            
            """
            _________________Owner_______________________
            * Here is the idea get -5th item of `line`, which should look like this:
            * '–æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ ¬´BI Group¬ª' or '–•–æ–∑—è–∏–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'. And there is only 4 types how this might be:
            * 1. 'x–æ–∑—è–∏–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'
            * 2. 'c–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'
            * 3. '–∫—Ä—ã—à–∞ –∞–≥–µ–Ω—Ç'
            * 4. '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞'
            """
            own = line[-5]
            if '—Ö–æ–∑—è–∏–Ω' in own:
                owners.append('—Ö–æ–∑—è–∏–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')
            elif 'c–ø–µ—Ü' in own:
                owners.append('c–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
            elif '–∫—Ä—ã—à–∞' in own:
                owners.append('–∫—Ä—ã—à–∞ –∞–≥–µ–Ω—Ç')
            else:
                owners.append('–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞')


            """
            _____________Area__________________________
            * This column is are of house on square meters `xx m^2`
            * The way to get it pretty simple:
            * frist item of line looks like this:
            * '4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, 160.85 –º¬≤'
            * We just take this value
            """
            areas.append(float(first[1].split()[0]))
            
            
            """
            _______________level(floor)______________
            * This section for extract `level`(I have no idea why I named this `level` but anyway),
            * to do it we get also get first item of `line` which might look like this:
            * '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, 33 –º¬≤, 5/5 —ç—Ç–∞–∂' or '3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞, 83 –º¬≤'
            * What we looking for is '5/5' frist is level of a house, second is level of a building
            * So just take them if there any
            """
            if len(first) < 3:
                levels.append(np.nan)
                level.append(np.nan)
            else:
                level.append(int(line[0].split(', ')[2].split()[0].split('/')[0]))
                try:

                    levels.append(
                        int(line[0].split(', ')[2].split()[0].split('/')[1]))
                except Exception as e:
                    levels.append(np.nan)


            """
            ________________Price(target)______________
            * It is pretty simple to take a price of a house, in second item of `line`
            * we get values: '20 500 000 „Äí' or '–æ—Ç 52 955 000 „Äí'
            * Get rid of spaces and '„Äí' also '–æ—Ç ' if needed
            """
            second = line[1]
            if "–æ—Ç" in second:
                prices.append(int(''.join(second.split()[1:-1])))
                isnewbuilding.append(True)
            else:
                prices.append(int(''.join(second.split()[:-1])))
                isnewbuilding.append(False)
               
                
            """
            ___________________City_____________________
            * Jus take the -4th item of `line` nothing special
            """
            citys.append(line[-4])


            """
            * TODO #1
            * Problem 1: Can get `districts` properly
            * need to code for searching `districts` by '—Ä-–Ω'
            * Problem 2: Should get `microdistrits` properly if possible unless just drop the columns
            * Problem 3: Column `streets` is one HUGE problem... I haven no idea how to get street name from this random block
            * maybe we will be need LLM for that, I look for that and maybe also LLM for entire Information Extraction
            """
            third = line[2].lower().split(', ')

            microdistrict = np.nan
            street = np.nan
            if len(third) > 2:
                districts.append(third[0].split()[0])
                if '–º–∫—Ä' in third[1] or '–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω' in third[1]:
                    microdistrict = third[1]
                else:
                    street = third[1]
            elif len(third) < 2:
                districts.append(np.nan)
                if '–∞—Å—ã–ª –∞—Ä–º–∞–Ω' in third[0]:
                    districts.append('–∞—Å—ã–ª –∞—Ä–º–∞–Ω')
                elif '–º–∫—Ä' in third[0] or '–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω' in third[0]:
                    microdistrict = third[0]
                else:
                    street = third[0]
            else:
                districts.append(third[0].split()[0])
                if '–º–∫—Ä' in third[1] or '–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω' in third[1]:
                    microdistrict = third[1]
                else:
                    street = third[1]

            microdistricts.append(microdistrict)
            streets.append(street)


            """
            _______________Build year________________
            * Search for '–≥.–ø.' or '–≥.–ø' and take the number before that
            """
            by = search_fn(line, '–≥.–ø.')
            if by:
                years.append(int(by.split()[0]))
            else:
                by = search_fn(line, '–≥.–ø')
                if by:
                    years.append(int(by.split()[0]))
                else: 
                    print(line)


            """
            ________________Ceiling hight___________________
            * Searh for keyword '–ø–æ—Ç–æ–ª–∫–∏' as a result you will get something like this:
            * '–ø–æ—Ç–æ–ª–∫–∏ 3–º.' if we get this result just take the number(floating number sometimes)
            * unless np.nan
            """
            ceiling = search_fn(line, '–ø–æ—Ç–æ–ª–∫–∏')
            try:

                if ceiling:
                    ceilings.append(float(ceiling.split()[1][:-2]))
                else:
                    ceilings.append(np.nan)
            except Exception as e:
                ceilings.append(np.nan)


            """
            _________________Type of bathroom_____________________
            * There is 4 types of bathroom on data:
            * '—Å–æ–≤–º–µ—â–µ–Ω–Ω—ã–π'
            * '—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π'
            * '2 —Å/—É –∏ –±–æ–ª–µ–µ'
            * '–æ–±—â–∏–π'
            * search for them.
            * If got different result add '–¥—Ä—É–≥–æ–π'
            * If got nothinng np.nan
            """
            bathroom = search_fn(line, '—Å–∞–Ω—É–∑–µ–ª')
            if bathroom:
                bathroom = bathroom.lower()
                bb = ''
                if '—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π' in bathroom:
                    bb = '—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π'
                elif '—Å–æ–≤–º–µ—â–µ–Ω' in bathroom or '—Å–æ–≤–º–µ—Å—Ç–Ω—ã–π' in bathroom:
                    bb = '—Å–æ–≤–º–µ—â–µ–Ω–Ω—ã–π'
                elif '2' in bathroom:
                    bb = '2 —Å/—É –∏ –±–æ–ª–µ–µ'
                elif '–æ–±—â–∏–π' in bathroom:
                    bb = '–æ–±—â–∏–π'
                else:
                    bb = '–¥—Ä—É–≥–æ–π'
                bathrooms.append(bb)
            else:
                bathrooms.append(np.nan)

            
            """
            __________________Type of repair_______________________
            * Here is the some types of repair on text
            * '—á–µ—Ä–Ω–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞'
            * '—á–∏—Å—Ç–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞'
            * '–ø—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞'
            * '—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞'
            * '—Ö–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç'
            * etc.
            * Algorithm is simple: check repair types above and if meet new just addd it)
            * If there is no any result for keyword '—Ä–µ–º–æ–Ω—Ç' np.nan
            """
            repaired = search_fn(line, '—Ä–µ–º–æ–Ω—Ç')
            dirty_repair = search_fn(line, '—á–µ—Ä–Ω–æ–≤')
            clean_repair = search_fn(line, '—á–∏—Å—Ç–æ–≤')

            if repaired:
                repaired = repaired.lower()
                if '—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞' in repaired or '—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–º–æ–Ω—Ç–∞' in repaired:
                    repairs.append('—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞')
                elif '—Ö–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç' in repaired or '—Ö–æ—Ä–æ—à–∏–º —Ä–µ–º–æ–Ω—Ç–æ–º' in repaired or '—Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞' in repaired:
                    repairs.append('—Ö–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç')
                elif '—Å–≤–µ–∂–∏–π —Ä–µ–º–æ–Ω—Ç' in repaired or '—Å–≤–µ–∂–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞' in repaired or '—Å–≤–µ–∂–∏–º —Ä–µ–º–æ–Ω—Ç–æ–º' in repaired:
                    repairs.append('—Å–≤–µ–∂–∏–π —Ä–µ–º–æ–Ω—Ç')
                elif '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç' in repaired or '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–µ–º–æ–Ω—Ç–æ–º' in repaired or '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞' in repaired:
                    repairs.append('–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç')
                elif '–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç' in repaired or '–∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞' in repaired or '–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–º —Ä–µ–º–æ–Ω—Ç–æ–º' in repaired:
                    repairs.append('–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç')
                elif '–ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞' in repaired:
                    repairs.append('–ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞')
                elif '–µ–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç' in repaired or '–µ–≤—Ä–æ —Ä–µ–º–æ–Ω—Ç' in repaired:
                    repairs.append('–µ–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç')
                elif '–¥–∏–∑–∞–π–Ω–µ—Ä' in repaired:
                    repairs.append('–¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç')
                else:
                    repairs.append('–¥—Ä–≥—É–æ–π —Ä–µ–º–æ–Ω—Ç')
            elif dirty_repair:
                dirty_repair = dirty_repair.lower()
                repairs.append('—á–µ—Ä–Ω–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞')

            elif clean_repair:
                clean_repair = clean_repair.lower()
                if '–ø—Ä–µ–¥—á–∏—Å—Ç–æ–≤' in clean_repair:
                    repairs.append('–ø—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞')
                else:
                    repairs.append('—á–∏—Å—Ç–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞')

            else:
                repairs.append(np.nan)
                
                
        """________________________Write all data to CSV fie________________________"""
        rows = zip(number_of_rooms, areas, levels, level, prices, districts,
                microdistricts, streets, years, ceilings, isnewbuilding, owners, bathrooms, repairs)

        # Write the data to the CSV file
        with open(file_to_save, mode='w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            # Write the header row if needed
            writer.writerow(['numrooms', 'squaremeters', 'levels_on_building', 'level', 'price', 'district',
                            'microdistrict', 'street', 'builtyear', 'ceilinghight', 'isnewbuilding', 'seller', 'bathroomtype', 'repaired'])

            # Write the data rows
            writer.writerows(rows)


if __name__ == "__main__":
    files = os.listdir('parsing_results/txt')
    for file in files:
        extract(f'parsing_results/txt/{file}')
        print(f'file {file} done extracting')